// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

enum ContributionType {
  DEVELOPMENT
  CONTENT
  CURATE
  OTHER
}

enum Platform {
  GITHUB
  X
  DISCORD
  FARCASTER
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PlanType {
  FREE
  BASIC
  STANDARD
  PRO
  TEAM
  BELIEVER
}

enum BillingCycle {
  NONE
  MONTHLY
  YEARLY
  BELIEVER
  COUPON
}

enum StripeType {
  NONE
  OWN
  PLATFORM
}

model Site {
  id                     String         @id @default(uuid()) @db.Uuid
  name                   String         @default("") @db.VarChar(100)
  description            String         @default("") @db.VarChar(500)
  about                  String         @default("") @db.Text
  spaceId                String?        @db.VarChar(50)
  logo                   String?        @default("") @db.VarChar(2183)
  font                   String         @default("font-cal") @db.VarChar(50)
  image                  String?        @default("") @db.VarChar(2183)
  podcastCover           String?        @default("") @db.VarChar(2183)
  email                  String?        @unique @db.VarChar(255)
  stripeType             StripeType     @default(NONE)
  sassSubscriptionId     String?        @unique @db.VarChar(50)
  sassSubscriptionStatus String?        @db.VarChar(50)
  sassBillingCycle       BillingCycle?  @default(NONE)
  sassPlanType           PlanType       @default(FREE)
  sassCustomerId         String?        @unique @db.VarChar(50)
  sassProductId          String?        @db.VarChar(50)
  sassCurrentPeriodEnd   DateTime?
  sassBelieverPeriodEnd  DateTime?
  stripeOAuthToken       Json?
  authSecret             String?        @unique @db.VarChar(255)
  socials                Json?
  analytics              Json?
  config                 Json?
  navLinks               Json?
  catalogue              Json?
  newsletterConfig       Json?
  notificationConfig     Json?
  aiProviders            Json?
  repo                   String?        @db.VarChar(100)
  installationId         Int?           @db.Integer // github app installationId
  balance                Json?
  themeName              String?        @db.VarChar(50)
  themeConfig            Json?
  memberCount            Int            @default(0) @db.Integer
  creationCount          Int            @default(0) @db.Integer
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  user                   User           @relation(fields: [userId], references: [id])
  userId                 String         @db.Uuid
  collaborators          Collaborator[]
  channels               Channel[]
  messages               Message[]
  creation               Creation[]
  domains                Domain[]
  tags                   Tag[]
  creationTags           CreationTag[]
  accessTokens           AccessToken[]
  comments               Comment[]
  databases              Database[]
  columns                Column[]
  records                Record[]
  views                  View[]
  assets                 Asset[]
  albums                 Album[]
  labels                 Label[]
  subscribers            Subscriber[]
  deliveries             Delivery[]
  newsletters            Newsletter[]
  authors                Author[]
  assetLabels            AssetLabel[]
  assetAlbums            AssetAlbum[]
  subscriptions          Subscription[]
  payouts                Payout[]
  invoices               Invoice[]
  products               Product[]
  orders                 Order[]
  campaigns              Campaign[]
  pledges                Pledge[]
  siteUsers              SiteUser[]
  areas                  Area[]
  molds                  Mold[]

  @@index([userId])
  @@map("site")
}

model User {
  id                String          @id @default(uuid()) @db.Uuid
  name              String?         @db.VarChar(255)
  displayName       String?         @db.VarChar(255)
  ensName           String?         @db.VarChar(255)
  email             String?         @unique @db.VarChar(255)
  emailVerified     DateTime?
  referralCode      String?         @unique @db.VarChar(50)
  commissionBalance Json?
  commissionRate    Int             @default(50)
  github            Json? // github oauth info
  google            Json? // google oauth info
  cfApiToken        String          @default("") @db.VarChar(2183)
  image             String?         @db.VarChar(2183)
  cover             String?         @db.VarChar(2183)
  bio               String          @default("") @db.VarChar(5000)
  about             String          @default("")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  creations         Creation[]
  comments          Comment[]
  tags              Tag[]
  accessTokens      AccessToken[]
  contributors      Collaborator[]
  messages          Message[]
  sites             Site[]
  accounts          Account[]
  themes            Theme[]
  hostedSites       HostedSite[]
  assets            Asset[]
  labels            Label[]
  albums            Album[]
  databases         Database[]
  columns           Column[]
  records           Record[]
  views             View[]
  subscriptions     Subscription[]
  subscribers       Subscriber[]
  newsletters       Newsletter[]
  authors           Author[]
  payouts           Payout[]
  products          Product[]
  orders            Order[]
  campaigns         Campaign[]
  pledges           Pledge[]
  siteUsers         SiteUser[]
  areas             Area[]
  referrals         Referral[]
  payoutAccounts    PayoutAccount[]
  invoices          Invoice[]
  molds             Mold[]

  @@index([id])
  @@map("user")
}

enum ProviderType {
  GOOGLE
  GITHUB
  WALLET
  FARCASTER
  PASSWORD
  EMAIL
}

model Account {
  id                String       @id @default(uuid()) @db.Uuid
  providerType      ProviderType
  providerAccountId String       @unique @default("") @db.VarChar(255)
  providerInfo      Json?
  email             String?      @db.VarChar(255)
  refreshToken      String?      @db.VarChar(255)
  accessToken       String?      @db.VarChar(255)
  expiresAt         Int?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id])
  userId            String       @db.Uuid

  @@index([userId])
  @@map("account")
}

model Referral {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  inviterId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.Uuid

  @@index([userId])
  @@map("referral")
}

model SiteUser {
  id     String @id @default(uuid()) @db.Uuid
  site   Site   @relation(fields: [siteId], references: [id])
  siteId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@unique([userId, siteId])
  @@map("site_user")
}

enum ChargeMode {
  NONE
  FREE
  PAID_ONE_TIME
  PAID_MONTHLY
  PAID_YEARLY
}

enum AreaType {
  SUBJECT
  COLUMN
  BOOK
}

model Area {
  id          String     @id @default(uuid()) @db.Uuid
  slug        String     @default(uuid())
  name        String     @default("") @db.VarChar(500)
  description String     @default("") @db.VarChar(1000)
  about       String     @default("") @db.Text
  logo        String?    @default("") @db.VarChar(2183)
  cover       String?    @default("") @db.VarChar(2183)
  catalogue   Json?
  widgets     Json?
  chargeMode  ChargeMode @default(NONE)
  type        AreaType   @default(SUBJECT)
  props       Json?
  favorites   Json?
  isGenesis   Boolean    @default(false)
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  site        Site       @relation(fields: [siteId], references: [id])
  siteId      String     @db.Uuid
  product     Product?   @relation(fields: [productId], references: [id])
  productId   String?    @db.Uuid
  creations   Creation[]

  @@unique([siteId, slug])
  @@index([siteId])
  @@index([siteId, chargeMode])
  @@index([userId])
  @@map("area")
}

enum ProductType {
  COMMON
  COLUMN
  BOOK
  COURSE
  TIER
  AMA
}

model Product {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @default("") @db.VarChar(50)
  description   String         @default("") @db.Text
  details       String         @default("") @db.Text
  type          ProductType    @default(COMMON)
  stock         Int            @default(0)
  image         String?        @default("") @db.VarChar(2183)
  price         Int            @default(0)
  isActive      Boolean        @default(true)
  maxMembers    Int?
  stripe        Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  site          Site           @relation(fields: [siteId], references: [id])
  siteId        String         @db.Uuid
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.Uuid
  orders        Order[]
  invoices      Invoice[]
  subscriptions Subscription[]
  areas         Area[]

  @@index([siteId])
  @@index([userId])
  @@index([siteId, userId])
  @@index([siteId, type])
  @@map("product")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model Order {
  id            String        @id @default(uuid()) @db.Uuid
  productAmount Int           @default(0)
  paidAmount    Int           @default(0) // money amount
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  customer      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  site          Site          @relation(fields: [siteId], references: [id])
  siteId        String        @db.Uuid
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.Uuid
  product       Product       @relation(fields: [productId], references: [id])
  productId     String        @db.Uuid

  @@index([siteId])
  @@index([userId])
  @@index([productId])
  @@index([siteId, productId])
  @@map("order")
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PayoutType {
  COMMISSION
  SITE_INCOME
}

model Payout {
  id        String       @id @default(uuid()) @db.Uuid
  amount    Int          @default(0)
  status    PayoutStatus @default(PENDING)
  type      PayoutType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  site      Site?        @relation(fields: [siteId], references: [id])
  siteId    String?      @db.Uuid
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.Uuid

  @@index([siteId])
  @@index([userId])
  @@index([siteId, userId])
  @@map("payout")
}

enum TransferMethod {
  NONE
  WALLET
  BLANK
  PAYPAL
}

model PayoutAccount {
  id             String         @id @default(uuid()) @db.Uuid
  transferMethod TransferMethod @default(NONE)
  info           Json?
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([userId])
  @@map("payout_account")
}

enum InvoiceType {
  NONE
  SUBSCRIPTION
  PENX_SUBSCRIPTION
  SITE_SUBSCRIPTION
  CAMPAIGN
  PRODUCT
}

model Invoice {
  id                  String      @id @default(uuid()) @db.Uuid
  type                InvoiceType @default(NONE)
  amount              Int         @default(0)
  stripeInvoiceId     String?     @unique @db.VarChar(50)
  stripeInvoiceNumber String?     @unique @db.VarChar(50)
  stripePeriodStart   Int         @default(0)
  stripePeriodEnd     Int         @default(0)
  currency            String?     @db.VarChar(50)
  locked              Boolean     @default(false)
  createdAt           DateTime    @default(now())
  site                Site        @relation(fields: [siteId], references: [id])
  siteId              String      @db.Uuid
  user                User        @relation(fields: [userId], references: [id])
  userId              String      @db.Uuid
  product             Product?    @relation(fields: [productId], references: [id])
  productId           String?     @db.Uuid
  campaign            Campaign?   @relation(fields: [campaignId], references: [id])
  campaignId          String?     @db.Uuid

  @@index([siteId])
  @@map("invoice")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAUSED
  EXPIRED
}

model Subscription {
  id                     String        @id @default(uuid()) @db.Uuid
  // status    SubscriptionStatus?
  sassSubscriptionId     String?       @unique @db.VarChar(50)
  sassSubscriptionStatus String?       @db.VarChar(50)
  sassBillingCycle       BillingCycle? @default(NONE)
  sassCustomerId         String?       @unique @db.VarChar(50)
  sassProductId          String?       @db.VarChar(50)
  sassCurrentPeriodEnd   DateTime?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  user                   User          @relation(fields: [userId], references: [id])
  userId                 String        @db.Uuid
  site                   Site          @relation(fields: [siteId], references: [id])
  siteId                 String        @db.Uuid
  product                Product       @relation(fields: [productId], references: [id])
  productId              String        @db.Uuid

  @@index([userId])
  @@index([siteId])
  @@index([siteId, userId])
  @@map("subscription")
}

model Coupon {
  id        String   @id @default(uuid()) @db.Uuid
  planId    String   @default("") @db.VarChar(100)
  code      String   @unique @default("") @db.VarChar(100)
  isUsed    Boolean  @default(false)
  duration  Int      @db.Integer
  createdAt DateTime @default(now())

  @@map("coupon")
}

model Mold {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @default("")
  description String     @default("") @db.VarChar(500)
  type        String
  props       Json?
  content     String     @default("") @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  site        Site       @relation(fields: [siteId], references: [id])
  siteId      String     @db.Uuid
  creations   Creation[]

  @@unique([siteId, type])
  @@index([userId])
  @@index([siteId])
  @@map("mold")
}

enum GateType {
  FREE
  PAID
  MEMBER_ONLY
}

enum CreationStatus {
  PUBLISHED
  CONTRIBUTED
  DRAFT
  ARCHIVED
}

enum CommentStatus {
  OPEN
  CLOSED
}

model Creation {
  id              String                   @id @default(uuid()) @db.Uuid
  slug            String                   @default(uuid())
  title           String                   @default("") @db.VarChar(500)
  description     String                   @default("") @db.VarChar(1000)
  icon            String                   @default("") @db.VarChar(50)
  image           String?                  @default("") @db.VarChar(2183)
  content         String                   @default("") @db.Text
  podcast         Json?
  i18n            Json?
  props           Json?
  cid             String                   @default("") @db.VarChar(100)
  type            String                   @default("ARTICLE")
  gateType        GateType                 @default(FREE)
  status          CreationStatus           @default(DRAFT)
  commentStatus   CommentStatus            @default(OPEN)
  commentCount    Int                      @default(0) @db.Integer
  featured        Boolean                  @default(false)
  collectible     Boolean                  @default(false)
  delivered       Boolean                  @default(false)
  checked         Boolean                  @default(false)
  isPopular       Boolean                  @default(false)
  isJournal       Boolean                  @default(false)
  isPage          Boolean                  @default(false)
  date            String                   @default("") @db.VarChar(20)
  publishedAt     DateTime?
  archivedAt      DateTime?
  openedAt        DateTime                 @default(now())
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  user            User                     @relation(fields: [userId], references: [id])
  userId          String                   @db.Uuid
  site            Site                     @relation(fields: [siteId], references: [id])
  siteId          String                   @db.Uuid
  areas           Area?                    @relation(fields: [areaId], references: [id])
  areaId          String?                  @db.Uuid
  moldId          String?                  @db.Uuid
  mold            Mold?                    @relation(fields: [moldId], references: [id])
  comments        Comment[]
  creationTags    CreationTag[]
  newsletters     Newsletter[]
  authors         Author[]
  engagementStats CreationEngagementStats?

  @@unique([siteId, slug])
  @@index([siteId])
  @@index([siteId, isPage])
  @@index([siteId, isPage, areaId])
  @@index([siteId, isPage, areaId, status])
  @@index([siteId, status])
  @@index([siteId, type])
  @@index([areaId])
  @@index([areaId, moldId])
  @@index([siteId, slug, status])
  @@index([siteId, gateType])
  @@map("creation")
}

model Author {
  id         String   @id @default(uuid()) @db.Uuid
  creation   Creation @relation(fields: [creationId], references: [id])
  creationId String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  site       Site     @relation(fields: [siteId], references: [id])
  siteId     String   @db.Uuid

  @@unique([userId, creationId])
  @@index([creationId])
  @@index([siteId])
  @@map("author")
}

model Comment {
  id         String    @id @default(uuid()) @db.Uuid
  content    String    @default("") @db.Text
  // Points to the ID of the parent comment, null for the root comment
  replyCount Int       @default(0) @db.Integer
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  creation   Creation  @relation(fields: [creationId], references: [id])
  creationId String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  parent     Comment?  @relation("ReplyRelation", fields: [parentId], references: [id]) // parent comments
  parentId   String?   @db.Uuid
  replies    Comment[] @relation("ReplyRelation") // sub comments
  site       Site      @relation(fields: [siteId], references: [id])
  siteId     String    @db.Uuid

  @@index([creationId])
  @@index([userId])
  @@map("comment")
}

model Tag {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @default("") @db.VarChar(50)
  color         String   @default("") @db.VarChar(50)
  creationCount Int      @default(0) @db.Integer
  hidden        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User         User?         @relation(fields: [userId], references: [id])
  userId       String?       @db.Uuid
  creationTags CreationTag[]
  Site         Site          @relation(fields: [siteId], references: [id])
  siteId       String        @db.Uuid

  @@index(name)
  @@index(hidden)
  @@map("tag")
}

model CreationTag {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creation   Creation @relation(fields: [creationId], references: [id])
  creationId String   @db.Uuid
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @db.Uuid
  site       Site     @relation(fields: [siteId], references: [id])
  siteId     String   @db.Uuid

  @@index([creationId])
  @@map("creation_tag")
}

model AccessToken {
  id          String    @id @default(uuid()) @db.Uuid
  token       String    @unique @default("") @db.VarChar(255)
  title       String?   @db.VarChar(50)
  description String?
  expiredAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsedAt  DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  siteId      String    @db.Uuid
  site        Site      @relation(fields: [siteId], references: [id])

  @@index([userId])
  @@map("access_token")
}

enum CollaboratorRole {
  READ
  WRITE
  ADMIN
  OWNER
}

model Collaborator {
  id        String           @id @default(uuid())
  role      CollaboratorRole @default(WRITE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  siteId    String           @db.Uuid
  site      Site             @relation(fields: [siteId], references: [id])
  userId    String           @db.Uuid
  user      User             @relation(fields: [userId], references: [id])

  @@unique([userId, siteId])
  @@index([siteId])
  @@index([userId])
  @@map("collaborator")
}

enum ChannelType {
  TEXT
}

model Channel {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @default("") @db.VarChar(50)
  description String      @default("") @db.Text
  type        ChannelType @default(TEXT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  site        Site        @relation(fields: [siteId], references: [id])
  siteId      String      @db.Uuid
  messages    Message[]

  @@index([siteId])
  @@map("channel")
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  // Sended = 1 Others sent successfully;SendFail = 2;Sending = 3;Undo = 4;AtAll = 5@All people;
  // SelfSend = 6 Send successfully; PeerRead = 7 The other party has read;
  // Reject = 8 // Backstage rejection (such as sensitive words, etc.)
  status      Int
  direction   Int // send 0; receive 1;
  toId        String // Receive userId
  contentType Int // TEXT = 1, IMAGE = 2
  content     String   @default("") @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String   @db.Uuid
  channel     Channel  @relation(fields: [channelId], references: [id])
  channelId   String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid

  @@index([channelId])
  @@index([userId])
  @@map("message")
}

model Cid {
  id        String @id @default(uuid()) @db.Uuid
  original  String @unique
  lowercase String @unique

  @@index([lowercase])
  @@map("cid")
}

enum SubdomainType {
  None
  Custom
  EnsName
  FarcasterName
  Address
  UserId
}

model Domain {
  id            String        @id @default(uuid()) @db.Uuid
  domain        String        @unique
  isSubdomain   Boolean       @default(true)
  subdomainType SubdomainType @default(None)
  disabled      Boolean       @default(false)
  site          Site          @relation(fields: [siteId], references: [id])
  siteId        String        @db.Uuid

  @@index([siteId])
  @@map("domain")
}

model RewardRequest {
  id              String           @id @default(uuid()) @db.Uuid
  userAddress     String
  type            ContributionType
  platform        Platform?
  content         String
  status          RequestStatus    @default(PENDING)
  tokenAmount     Float?           @default(0.0)
  transactionHash String?
  comments        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userAddress])
  @@map("reward_request")
}

model Theme {
  id                String   @id @default(uuid()) @db.Uuid
  name              String   @unique @default("") @db.VarChar(100)
  displayName       String   @default("") @db.VarChar(255)
  manifest          String   @db.Text
  readme            String?  @db.Text
  logo              String?  @default("") @db.VarChar(2183)
  installationCount Int      @default(0)
  starCount         Int      @default(0)
  commentCount      Int      @default(0)
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([name])
  @@map("theme")
}

model HostedSite {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @default("") @db.VarChar(100)
  domain      String   @default("") @db.VarChar(2183)
  description String   @default("") @db.VarChar(500)
  logo        String   @default("") @db.VarChar(2183)
  version     String   @default("") @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid

  @@index([userId])
  @@map("hosted_site")
}

model Asset {
  id            String       @id @default(uuid()) @db.Uuid
  url           String       @default("") @db.VarChar(2183)
  filename      String       @default("") @db.VarChar(2183)
  title         String       @default("") @db.VarChar(2183)
  description   String       @default("") @db.VarChar(500)
  contentType   String       @default("") @db.VarChar(100)
  isPublic      Boolean      @default(false)
  isTrashed     Boolean      @default(false)
  size          Int          @default(0) @db.Integer
  props         Json?
  sharingConfig Json?
  createdAt     DateTime
  updatedAt     DateTime     @updatedAt
  uploadedAt    DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @db.Uuid
  site          Site         @relation(fields: [siteId], references: [id])
  siteId        String       @db.Uuid
  assetLabels   AssetLabel[]
  assetAlbums   AssetAlbum[]

  @@index([userId])
  @@index([url])
  @@index([contentType])
  @@map("asset")
}

model Label {
  id         String @id @default(uuid()) @db.Uuid
  name       String @default("") @db.VarChar(50)
  color      String @default("") @db.VarChar(50)
  title      String @default("") @db.VarChar(2183)
  assetCount Int    @default(0) @db.Integer

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.Uuid
  site        Site         @relation(fields: [siteId], references: [id])
  siteId      String       @db.Uuid
  assetLabels AssetLabel[]

  @@index([userId])
  @@map("label")
}

model AssetLabel {
  id        String   @id @default(uuid()) @db.Uuid
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String   @db.Uuid
  label     Label    @relation(fields: [labelId], references: [id])
  labelId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id])
  siteId    String   @db.Uuid

  @@map("asset_label")
}

model Album {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @default("") @db.VarChar(50)
  assetCount  Int          @default(0) @db.Integer
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.Uuid
  site        Site         @relation(fields: [siteId], references: [id])
  siteId      String       @db.Uuid
  assetAlbums AssetAlbum[]

  @@index([userId])
  @@map("album")
}

model AssetAlbum {
  id        String   @id @default(uuid()) @db.Uuid
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String   @db.Uuid
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id])
  siteId    String   @db.Uuid

  @@map("asset_album")
}

model Database {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @default("") @db.VarChar(50)
  slug         String   @default(uuid())
  color        String   @default("") @db.VarChar(50)
  parentId     String?  @db.Uuid
  parentType   String?
  icon         String   @default("") @db.VarChar(50)
  cover        String?  @db.VarChar(2183)
  content      Json?
  activeViewId String?  @unique @db.Uuid
  viewIds      Json?
  props        Json?
  children     Json?
  isTrashed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  site         Site     @relation(fields: [siteId], references: [id])
  siteId       String   @db.Uuid
  columns      Column[]
  records      Record[]
  views        View[]

  @@unique([siteId, slug])
  @@index([userId])
  @@index([siteId])
  @@map("database")
}

model Column {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @default(uuid())
  displayName String   @default("")
  description String   @default("") @db.VarChar(500)
  columnType  String
  config      Json?
  options     Json?
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid
  database    Database @relation(fields: [databaseId], references: [id])
  databaseId  String   @db.Uuid
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String   @db.Uuid

  @@unique([databaseId, name])
  @@index([databaseId])
  @@index([userId])
  @@index([siteId])
  @@map("column")
}

model Record {
  id         String    @id @default(uuid()) @db.Uuid
  sort       Int       @default(0) @db.Integer
  columns    Json
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  database   Database  @relation(fields: [databaseId], references: [id])
  databaseId String    @db.Uuid
  site       Site      @relation(fields: [siteId], references: [id])
  siteId     String    @db.Uuid

  @@index([databaseId])
  @@index([userId])
  @@index([siteId])
  @@map("record")
}

model View {
  id              String   @id @default(uuid()) @db.Uuid
  name            String   @default("") @db.VarChar(50)
  description     String   @default("") @db.VarChar(500)
  viewType        String
  viewColumns     Json
  sorts           Json?
  groups          Json
  filters         Json
  kanbanColumnId  String?  @db.Uuid // columnId for kanban
  kanbanOptionIds Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.Uuid
  database        Database @relation(fields: [databaseId], references: [id])
  databaseId      String   @db.Uuid
  site            Site     @relation(fields: [siteId], references: [id])
  siteId          String   @db.Uuid

  @@index([databaseId])
  @@index([userId])
  @@index([siteId])
  @@map("view")
}

model Extension {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String
  name              String   @unique
  title             String   @db.Text
  manifest          String   @db.Text
  readme            String   @db.Text
  logo              String
  installationCount Int      @default(0)
  starCount         Int      @default(0)
  commentCount      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([name])
  @@map("extension")
}

// ========= Newsletter =========

enum NewsletterStatus {
  DRAFT // Initial state when created
  SENDING // Currently being sent
  SENT // Successfully sent to all subscribers
  FAILED // Failed to send
  SCHEDULED // Scheduled for future sending
}

enum SubscriberStatus {
  PENDING // Subscriber is pending confirmation
  ACTIVE // Subscriber is active and receiving emails
  UNSUBSCRIBED // Subscriber has opted out
}

enum DeliveryStatus {
  PENDING // Waiting to be sent
  SENDING // In the process of sending
  SENT // Successfully delivered
  FAILED // Failed to deliver
  BOUNCED // Email bounced
  COMPLAINED // Marked as spam
}

model Newsletter {
  id          String           @id @default(uuid()) @db.Uuid
  title       String           @db.VarChar(255)
  subject     String           @db.VarChar(255)
  content     String           @db.Text
  status      NewsletterStatus @default(DRAFT)
  creationId  String?          @db.Uuid
  creator     User             @relation(fields: [creatorId], references: [id])
  creatorId   String           @db.Uuid
  scheduledAt DateTime? // When to send if scheduled
  sentAt      DateTime? // When it was actually sent
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  site        Site             @relation(fields: [siteId], references: [id])
  siteId      String           @db.Uuid
  creation    Creation?        @relation(fields: [creationId], references: [id])
  deliveries  Delivery[]

  @@index([creatorId])
  @@index([siteId])
  @@index([creationId])
  @@index([status])
  @@map("newsletter")
}

// Newsletter subscriber
model Subscriber {
  id               String           @id @default(uuid()) @db.Uuid
  email            String?          @db.VarChar(255)
  status           SubscriberStatus @default(ACTIVE)
  source           String?          @db.VarChar(100) // Where they subscribed from
  confirmationCode String           @db.VarChar(100)
  unsubscribeCode  String           @db.VarChar(100)
  confirmedAt      DateTime?
  unsubscribedAt   DateTime?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id])
  userId           String           @db.Uuid
  siteId           String           @db.Uuid
  site             Site             @relation(fields: [siteId], references: [id])
  deliveries       Delivery[]

  @@unique([email, siteId])
  @@index([siteId])
  @@index([email])
  @@index([status])
  @@map("subscriber")
}

model Delivery {
  id             String         @id @default(uuid()) @db.Uuid
  unSubscribeUrl String?        @db.VarChar(255)
  status         DeliveryStatus @default(PENDING)
  errorMessage   String?        @db.Text
  messageId      String?        @db.VarChar(255)
  provider       String?        @db.VarChar(50)
  sentAt         DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscriber     Subscriber     @relation(fields: [subscriberId], references: [id])
  subscriberId   String         @db.Uuid
  newsletter     Newsletter     @relation(fields: [newsletterId], references: [id])
  newsletterId   String         @db.Uuid
  siteId         String         @db.Uuid
  site           Site           @relation(fields: [siteId], references: [id])

  @@index([siteId])
  @@index([subscriberId])
  @@index([newsletterId])
  @@index([status])
  @@map("delivery")
}

enum SystemEmailType {
  SUBSCRIPTION_CONFIRM // Confirm email subscription
  RESET_PASSWORD // Reset password
  NOTIFICATION // General notification
}

enum SystemEmailStatus {
  PENDING // Waiting to be sent
  SENDING // In the process of sending
  SENT // Successfully sent
  FAILED // Failed to send
}

model SystemEmail {
  id           String            @id @default(uuid()) @db.Uuid
  type         SystemEmailType
  status       SystemEmailStatus @default(PENDING)
  toEmail      String            @db.VarChar(255)
  subject      String            @db.VarChar(255)
  content      String            @db.Text
  metadata     Json?
  errorMessage String?           @db.Text
  messageId    String?           @db.VarChar(255)
  provider     String?           @db.VarChar(50)
  sentAt       DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([type])
  @@index([status])
  @@map("system_email")
}

model Campaign {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @default("") @db.VarChar(50)
  description     String    @default("") @db.Text
  details         String    @default("") @db.Text
  image           String?   @default("") @db.VarChar(2183)
  goal            Int       @default(0)
  currentAmount   Int       @default(0)
  backerCount     Int       @default(0)
  deadline        DateTime?
  isActive        Boolean   @default(true)
  stripeProductId String?
  stripePriceId   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  site            Site      @relation(fields: [siteId], references: [id])
  siteId          String    @db.Uuid
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.Uuid
  pledges         Pledge[]
  invoices        Invoice[]

  @@index([siteId])
  @@index([userId])
  @@index([siteId, userId])
  @@map("campaign")
}

enum PledgeStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Pledge {
  id         String      @id @default(uuid()) @db.Uuid
  paidAmount Int         @default(0) // money amount
  status     OrderStatus @default(PENDING)
  customer   Json?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  campaign   Campaign    @relation(fields: [campaignId], references: [id])
  campaignId String      @db.Uuid
  site       Site        @relation(fields: [siteId], references: [id])
  siteId     String      @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.Uuid

  @@index([siteId])
  @@index([userId])
  @@index([campaignId])
  @@index([siteId, campaignId])
  @@map("pledge")
}

model CreationEngagementStats {
  id          String   @id @default(cuid())
  creationId  String   @unique @db.Uuid
  pageViews   Int      @default(0) // Total view count
  uniqueViews Int      @default(0) // Unique visitor count
  lastUpdated DateTime @updatedAt
  creation    Creation @relation(fields: [creationId], references: [id], onDelete: Cascade)

  @@index([creationId])
  @@map("creation_engagement_stats")
}
